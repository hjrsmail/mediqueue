// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PETUGAS
}

enum Status {
  MENUNGGU
  DIPERIKSA
  SELESAI
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          Role      @default(PETUGAS)
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Petugas {
  id    String @id @default(uuid())
  name  String
  email String @unique
}

model Poli {
  id        String    @id @default(uuid())
  name      String
  address   String
  code      String    @unique
  createdAt DateTime  @default(now())
  antrians  Antrian[]
}

model Pasien {
  id          String    @id @default(uuid())
  nik         String    @unique
  fullname    String
  phonenumber String
  address     String
  // poli        String
  antrians    Antrian[]
}

model Dokter {
  id             String   @id @default(uuid())
  name           String
  specialization String
  phone          String
  address        String
  createdAt      DateTime @default(now())
}



model Antrian {
  id        String   @id @default(uuid())
  nomor     Int
  status    Status
  createdAt DateTime @default(now())
  tanggal   DateTime @default(now())

  pasienId String
  pasien   Pasien @relation(fields: [pasienId], references: [id])

  poliId String
  poli   Poli   @relation(fields: [poliId], references: [id])

  dokterId String?
}

model Setting {
  id        String @id @default(uuid())
  key       String @unique
  value     String
  updatedAt DateTime @updatedAt
}


model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
